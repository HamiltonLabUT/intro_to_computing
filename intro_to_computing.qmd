---
title: "Introduction to Computing, Unix, and the Command Line"
format:
  html:
    theme: sandstone
    css: ../styles.css
    toc: true
    code-copy: true
    code-block-background: true
    code-fold: show
    code-tools: true
execute:
  freeze: auto
---

::: {.callout-note}
## Overview

This tutorial includes information about how to think about computers and how to use the command line (on Mac and Unix systems). Much of this information is copied from [Chris Paciorek's course](https://berkeley-scf.github.io/compute-skills-2024/units/intro-computing.html).
:::


# Parts of a computer

There are a couple of aspects of your computer that are helpful to know about. 

-   CPU (Central Processing Unit) - number of cores
    - cache (limited fast memory easily accessible from the CPU)
-   main memory (RAM)
-   disk (hard drive space)
-   GPU (Graphics Processing Unit) - special processing unit for accelerating graphics, can be used in specialized applications

These are important to know about when running code, because sometimes your code will be slow for different reasons. 
 - doing the actual calculations on the CPU,
 - moving data back and forth from (main) memory (RAM) to the CPU, or
 - reading/writing (I/O) data to/from disk.

# The filesystem

The filesystem is the organization of data/files on a storage device, such as the local disk on your machine.

The filesystem on a Linux or MacOS machine can be thought of as an upside-down tree, with `/` as the root (top) of the tree.

For example, part of the file tree for our datasets might look like this:

```
.
├── S0035_B1
│   ├── Audio
│   │   ├── S0035_B1_mic.wav
│   │   ├── S0035_B1_spkr.wav
│   │   └── S0035_B1_spkr_right.wav
│   ├── Raw
│   │   ├── ecogDS.mat
│   │   └── ecog_raw.fif
│   └── ecog400
│       └── ecog.mat
├── S0035_B2
│   ├── Audio
│   │   ├── S0035_B2_mic.wav
│   │   ├── S0035_B2_spkr.wav
│   │   └── S0035_B2_spkr_right.wav
│   ├── Raw
│   │   ├── ecogDS.mat
│   │   ├── ecog_raw.fif
│   │   ├── ecog_raw_annotated_AF.fif
│   │   └── raw_psd.pdf
│   └── ecog400
│       └── ecog.mat
├── S0035_B3
│   ├── Audio
│   │   ├── S0035_B3_mic.wav
│   │   ├── S0035_B3_spkr.wav
│   │   └── S0035_B3_spkr_right.wav
│   ├── HilbAA_70to150_8band
│   │   └── ecog_hilbAA_70to150_8band_notch_car_log.fif
│   ├── Raw
│   │   ├── ecogDS.mat
│   │   ├── ecog_raw.fif
│   │   ├── ecog_raw_annotated_RA.fif
│   │   ├── ecog_raw_notch.fif
│   │   ├── ecog_raw_notch_car.fif
│   │   └── raw_psd.pdf
│   └── ecog400
│       └── ecog.mat
├── S0035_TrialNotes.xlsx
└── clinical_data
    └── S0035_day1.EDF
```

`/S0035_B1`, `/S0035_B2`, `/S0035_B3`, and `/clinical_data` are the directories at the root in the example above. `S0035_TrialNotes.xlsx` is a file in the root directory.

We'll see more examples when we start using the shell.

Things are similar on Windows, though there the root is a lettered drive, such as `C:`.

For scientific computing, you'll often be connecting remotely to other machines/clusters and navigating the filesystem on those other systems. For example, if you run code on TACC.

# The shell and UNIX commands

Operating on the UNIX command line is also known as *using the terminal* and *using the shell*.

The shell is the UNIX program that you interact with when in a terminal window interacting with a UNIX-style operating system (e.g., Linux or MacOS). The shell sits between you and the operating system and provides useful commands and functionality. Basically, the shell is a program that serves to run other commands for you and show you the results. There are actually different shells that you can use, of which bash is very common and is the default on many systems. In recent versions of MacOS, `zsh` is the default shell. `zsh` is an extension of bash.

If you start up a Terminal on your own computer (on Mac, this is called `Terminal`, on Windows you can install `git-bash` and it will work similarly. You will see something like this:

```
(base) liberty@wireless-10-147-74-255 ~ %
```

but below we'll indicate that simply as:

```
%
```

You might also see a `$` instead:

```
$
```

## Files and directories

### Moving around and listing information

We'll start by thinking about the filesystem, which organizes our information/data into files on the computer's disk.

Anytime you are at the UNIX command line, you have a **working directory**, which is your current location in the file system. 

Here's how you can see where you are using the `pwd` ("print working directory") command:

```bash
% pwd
/Users/liberty/Documents/Austin/code/intro_to_computing
```



and here's how you use `ls` to list the files (and subdirectories) in the working directory...

```bash
% ls
assets    LICENSE    README.md    intro_to_computing.qmd
```

Now suppose I want to be in a different directory so I can see what is there or do things to the files in that directory.

The command you need is `cd` ("change directory") and an important concept you need to become familiar with is the notion of 'relative' versus 'absolute' *path*. A path is the set of nested directories that specify a location of interest on the filesystem.

Now let's go into a subdirectory. We can use `cd` with the name of the subdirectory. The subdirectory is found 'relative' to our working directory, i.e., found from where we currently are.

```bash
% cd assets
% pwd
/Users/liberty/Documents/Austin/code/intro_to_computing/assets
```

We could also navigate through nested subdirectories. For example, after going back to our home directory (using `cd` alone will do this), let's go to the `units` subdirectory of the `compute-skills-2024` subdirectory. The `/` is a separate character that distinguishes the nested subdirectories.

```bash
% cd
% pwd
/Users/liberty
% cd Documents/Austin/code/intro_to_computing/assets
```

You can access the parent directory of any directory using `..`:

```bash
% cd ..
% pwd
/Users/liberty/Documents/Austin/code/intro_to_computing
```

We can get more complicated in our use of `..` with relative paths. Here we'll go up a directory and then down to a different subdirectory.

```bash
$ cd other
$ cd ../assets
$ pwd
/Users/liberty/Documents/Austin/code/intro_to_computing/assets
```

And here we'll go up two directories and then down to another subdirectory.

```bash
$ cd ../../match_filter  # Go up two directories and down.
$ pwd
/Users/liberty/Documents/Austin/code/match_filter
```

### Absolute versus relative paths

All of the above examples used **relative** paths to navigate based on your working directory at the moment you ran the command.

We can instead use **absolute** paths so that it doesn't matter where we are when we run the command. Specifying an absolute path is done by having your path start with `/`, such as `/Users/liberty`. If the path doesn't start with `/` then it is interpreted as being a relative path, relative to your working directory. Here we'll go to the `units` subdirectory again, but this time using an absolute path. 

```bash
$ cd /Users/liberty/Documents/Austin/code/intro_to_computing
$ pwd
/Users/liberty/Documents/Austin/code/intro_to_computing
```

::: {.callout-warning}
## Absolute paths can be dangerous

It's best to generally use relative paths, relative to the main directory of a project.

Using absolute paths is generally a bad idea for reproducibility and automation because the file system will be different on different machines, so your code wouldn't work correctly anywhere other than your current machine. 

:::

# Finding your way around

```bash
$ ls /Users
Shared	liberty
```

```bash
$ cd /Users/liberty
```

Go to the home directory of the current user (which happens to be the `liberty` user):


```bash
$ cd ~
$ pwd
/Users/liberty
```

Go to the home directory of the user explicitly:

```bash
$ cd ~liberty
$ pwd
/Users/liberty
``


We can return to the most recent directory we were in like this:

```bash
$ cd -
$ pwd
/Users
```

## Using commands

### Overview

Let's look more at various ways to use commands. We just saw the `ls` command. Here's one way we can modify the behavior of the command by passing a command option. Here the `-F` option (also called a *flag*) shows directories by appending `/` to anything that is a directory (rather than a file) and a `*` to anything that is an executable (i.e., a program).

```bash
$ cd /Users/liberty/Documents/Austin/code/intro_to_computing
$ ls -F
$ ls -F /usr/bin
```


Next we'll use multiple options to the `ls` command. `-l` shows extended information about files/directories. `-t` shows files/directories in order of the time at which they were last modified and `-r` shows in reverse order. 

While each command has its own syntax, there are some rules usually
followed. Generally, executing a command consists of four things:

  - the command
  - command option(s)
  - argument(s) 
  - line acceptance (i.e., hitting <Return>)
  
Here's an example:

```bash
$ echo "hello there" >> example.txt
$ echo "this is a text file" >> example.txt
$ echo "and now I am done" >> example.txt
$ wc -l example.txt
3 example.txt
```

In the above example, `wc` is the command, `-l` is a command option
specifying to count the number of lines, `example.txt` is the argument, and the
line acceptance is indicated by hitting the `<Return>` key at the end of
the line.

So that invocation counts the number of lines in the file named `example.txt`.

The spaces are required and distinguish the different parts of the invocation. For this reason,
it's generally a bad idea to have spaces within file names. But if you do, you can
use quotation marks to distinguish the file name, e.g.,

```bash
$ ls -l "name of my file with spaces.txt"
```

Also, capitalization matters. For example `-l` and `-L` are different options.

Note that options, arguments, or both might not be included in some cases. Recall that we've used `ls`
without either options or arguments.

Arguments are usually one or more files or directories.

### Options

Often we can specify an option either in short form (as with `-l` here)
or long form (`--lines` here), as seen in the following equivalent invocations:

```bash
$ wc -l example.txt
3 example.txt
$ wc --lines example.txt
3 example.txt
```


We can also ask for the number of characters with the `-m` option, which can
be combined with the `-l` option equivalently in two ways:

```bash
$ wc -lm example.txt
  3 35 example.txt
$ wc -l -m example.txt
  3 35 example.txt
```


Options will often take values, e.g., if we want to get the first two lines of the file,
the following invocations are equivalent:

```bash
$ head -n 2 example.txt
$ head --lines=2 example.txt
$ head --lines 2 example.txt
```

### Getting help with UNIX commands

Essentially all UNIX commands have  help information (called a man page), accessed using `man`.

```bash
$ man ls
```

Once you are in the *man* page, you can navigate by hitting `<space>` (to scroll down) and the `<up>` and `<down>` arrows. You can search by typing `/`, typing the string you want to search for and hitting `<Return>`. You can use `n` and `p` for the next and previous search hits and `q` to quit out of the search.

Unfortunately *man* pages are often quite long, hard to understand, and without examples. But the information you need is usually there if you take the time to look for it.

Also, UNIX commands as well as other programs run from the command line often provide help information via the `--help` option, e.g., for help on `ls`:

```bash
$ ls --help
```

### Tab completion

If you hit `Tab` the shell tries to figure out what command or filename you want based on the initial letters you typed.

::: {.callout-tip}
## Tab completion everywhere
Lots of interactive programs have adopted the idea of tab completion, including Python/IPython and R.
:::

### Command history

Hit the `up` key. You should see the previous command you typed.
Hit it again. You should see the 2nd most recent command.

`Ctrl-a` and `Ctrl-e` navigate to the beginning and end of a line. You can edit your previous command and then hit `Enter` to run the modified code.

### Seeing if a command or program is available

You can see if a command or program is installed (and where it is installed) using `type`.

```bash
$ type grep
grep is /usr/bin/grep
$ type R
R is /usr/bin/R
$ type python
python is /srv/conda/bin/python
```

## Working with files

### Copying and removing files

You'll often want to make a copy (`cp`) of a file, move it (`mv`) between directories, or remove it (`rm`). 

```bash
$ cd ~/compute-skills-2024/units
$ cp calc.py calc-new.py
$ mv calc-new.py /tmp/.
$ cd /tmp
$ ls -lrt
total 8
drwx-----T 2 jovyan jovyan 4096 Aug  1 16:15 jupyter-runtime
-rw-r--r-- 1 jovyan jovyan  413 Aug  1 16:16 calc-new.py
```

When we moved the file, the use of `.` in `/tmp/.` indicates we want to use the same name as the original file.


```bash
$ rm calc-new.py
$ ls -lrt
total 4
drwx-----T 2 jovyan jovyan 4096 Aug  1 16:15 jupyter-runtime
```

::: {.callout-important}

## `rm` cannot be undone

I used `rm` above to remove the file. Be very careful about removing files - there is no Trash folder in UNIX - once a file is removed, it's gone for good.

:::


The `mv` command is also used if you want to rename a file. 
```bash
$ cd ~/compute-skills-2020/units
$ mv session3.qmd _sesson3.qmd
$ ls
```


## Exercises: shell commands

::: {.callout-tip}
## Exercise 1

Where is `gzip` installed on the system? What are some other commands/executables that are installed in the same directory?

:::

::: {.callout-tip}
## Exercise 2

Try to run the following command `mkdir ~/projects/drought`. It will fail. Look in the help information on `mkdir` to figure out how to make it work without first creating the `projects` directory.
:::

::: {.callout-tip}
## Exercise 3

Figure out how to list out the files in a directory in order of decreasing file size, as a way to see easily what the big files are that are taking up the most space. Modify this command to get the result in the ascending order.
:::

::: {.callout-tip}
## Exercise 4

Figure out how to copy an entire directory and have the timestamps of the files retained rather than having the timestamps be the time that you copied the files.

See if you can combine the short form of an option with the long form of a different option.

What happens if you use a single dash with the long form of an option. Are you able to interpret the error message? (Note that confusingly there are some situations one can use the long form with a single dash.)

:::

## Running processes

We'll run a simple linear algebra operation in Python to illustrate how we can monitor what is happening on a machine.

::: {.callout-warning}
## DataHub memory limits

Be careful about increasing `n` in the example below when on DataHub. Basic DataHub virtual machines by default only have 1 GB memory, so don't increase `n` below or you may run out of memory if running on DataHub and this can cause problems in your DataHub session. If you're doing this as part of the workshop, we've increased those limits somewhat, so somewhat larger values of `n` should be fine.

:::

```{python}
#| eval: false
import numpy as np
import time

def run_linalg(n):
    z = np.random.normal(0, 1, size=(n, n))
    print(time.time())
    x = z.T.dot(z)   # x = z'z
    print(time.time())
    U = np.linalg.cholesky(x)  # factorize as x = U'U
    print(time.time())

## This allows us to run the code from the command line
## without running it when we import the file as a module.
if __name__ == '__main__':
    run_linalg(4000)
```

```bash
python calc.py
```

We might need to run it in a loop to be able to monitor the running process (since it finishes so quickly):

```{python}
#| eval: false
for ((i=0;i<10;i++)); do
  python calc.py
done
```

### Monitoring CPU and memory use

We can see CPU and memory usage via `top`.

If we see more than 100% CPU usage, that indicates that the process is running a computation in parallel using multiple threads.

What about if we see less than 100% CPU usage?

 - Our process might be busy doing I/O (reading/writing to/from disk).
 - Our process might be waiting for data from the internet or from another machine on the network.
 - The machine might be running low on physical memory, which in some cases will involve using disk as additional memory (slow!).
 
